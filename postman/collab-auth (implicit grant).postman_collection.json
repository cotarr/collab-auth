{
	"info": {
		"name": "collab-auth (implicit grant)",
		"description": "See collab-auth/postman/README.md\n\nToken Workflows\n\n- No cookie, Untrusted Client 1-3-4-5-6\n- No cookie, Trusted Client 1-3-4-6 (skip 5)\n- Cookie, Untrusted Client 1-5-6\n- Cookie, Trusted Client 1-6 (skip 5)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "0 /logout clear cookies and variables",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// The domain 127.0.0.1 must be whitelisted in postman to avoid error:",
							"const jar = pm.cookies.jar();",
							"jar.clear('127.0.0.1', (err) => {",
							"    if (err) console.log(err);",
							"});",
							"",
							"// Clear global vaariables",
							"pm.globals.unset('transaction_id');",
							"pm.globals.unset('access_token');",
							"pm.globals.unset('refresh_token');",
							"pm.globals.unset('csrf_token');",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{auth_host}}/logout",
					"host": [
						"{{auth_host}}"
					],
					"path": [
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "1 /dialog/authorize 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//",
							"// Test for /dialog/authorize",
							"//",
							"// 1) Accept 302 redirect /login if cookie/sesson not logged in",
							"// 2) Accept 302 redirect to callbaack with auth code if authorized with trusted client",
							"//       - parse authorizaton code to global variable",
							"// 3) Accept 200 decision dialog page if authorized with untrusted client",
							"//       - parse transaction code",
							"// --------------------------------------------------------------------------",
							"pm.test(\"/dialog/authorise response analysis\", function () {",
							"    pm.globals.set('transaction_id', '');",
							"    pm.globals.set('access_token', '')",
							"    pm.globals.set('refresh_token', '')",
							"    if (pm.response.code === 302) {",
							"        // If 302 redirect, must have location header",
							"        let location = pm.response.headers.get('Location');",
							"        if (location) {",
							"            // Is # symbol correct?",
							"            let urlQueryPart = location.split('#')[1];",
							"            if (urlQueryPart) {",
							"                let queryKey = urlQueryPart.split('=')[0];",
							"                if (queryKey === 'access_token') {",
							"                    let accessToken = urlQueryPart.split('=')[1].split('&')[0];",
							"                    // console.log(accessToken);",
							"                    if (accessToken) {",
							"                        pm.globals.set('access_token', accessToken);",
							"                    } else {",
							"                        throw new Error('An access_token was not found in the response')",
							"                    }",
							"                    postman.setNextRequest('/oauth/introspect')",
							"                } else {",
							"                    throw new Error('Redirect has URL query without \"access_token\"');",
							"                }",
							"            } else {",
							"                // case of no query parameters in URL, must be /login request",
							"                pm.expect(location).to.equal('/login')",
							"            }",
							"        } else {",
							"            throw new Error('302 redirect without location header');",
							"        }",
							"    } else if (pm.response.code === 200) {",
							"        if (pm.response.text().indexOf('<title>Resource Decision</title>') >= 0) {",
							"            let arrayOfQuotedStrings = pm.response.text().split('\\\"')",
							"            let transactionIdIndex = arrayOfQuotedStrings.indexOf('transaction_id');",
							"            if (transactionIdIndex > 0) {",
							"                let transactionIdValue = arrayOfQuotedStrings[transactionIdIndex + 4];",
							"                pm.globals.set('transaction_id', transactionIdValue);",
							"            } else {",
							"                throw new Error('transaction_id not found in decision dialog html file');",
							"            }",
							"            let csrfTokenIndex = arrayOfQuotedStrings.indexOf('_csrf');",
							"            if (csrfTokenIndex > 0) {",
							"                let csrfTokenValue = arrayOfQuotedStrings[csrfTokenIndex + 2];",
							"                pm.globals.set('csrf_token', csrfTokenValue);",
							"            } else {",
							"                throw new Error('csrf token not found in decision dialog html file');",
							"            }",
							"            postman.setNextRequest('5 /dialog/authorize/decision (untrusted)')",
							"        } else {",
							"            throw new Error('Decision dialog not found in 200 response');",
							"        }",
							"    } else {",
							"        throw new Error('/dialog/authorize not an expected response');",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{auth_host}}/dialog/authorize?redirect_uri={{redirect_uri}}&response_type=token&client_id={{client_id}}&scope={{scopes}}",
					"host": [
						"{{auth_host}}"
					],
					"path": [
						"dialog",
						"authorize"
					],
					"query": [
						{
							"key": "redirect_uri",
							"value": "{{redirect_uri}}"
						},
						{
							"key": "response_type",
							"value": "token"
						},
						{
							"key": "client_id",
							"value": "{{client_id}}"
						},
						{
							"key": "scope",
							"value": "{{scopes}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2 /login (form, csrfToken)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Extract CSRF token to global variables\", function () {",
							"    let body = pm.response.text();",
							"    let bodyArray = body.split('\\n');",
							"    let csrfToken = '';",
							"    for (let i = 0; i < bodyArray.length; i++) {",
							"        let splitByQuote = bodyArray[i].split('\"');",
							"        if ((splitByQuote.length === 7) && (splitByQuote[3] === '_csrf')) {",
							"            csrfToken = splitByQuote[5];",
							"        }",
							"    } // next i",
							"    // console.log('csrf_token: ', csrfToken);",
							"    if (csrfToken) {",
							"        pm.globals.set('csrf_token', csrfToken);",
							"    } else {",
							"        throw new Error('A csrf token was not found in html form');",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{auth_host}}/login",
					"host": [
						"{{auth_host}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "3 login (username, password)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 302\", function () {",
							"    pm.response.to.have.status(302);",
							"});",
							"",
							"pm.test(\"Redirect address is /dialog/authorize\", function () {",
							"    let location = pm.response.headers.get('Location');",
							"    if (location) {",
							"        location = location.split('?')[0];",
							"        pm.expect(location).to.equal('/dialog/authorize');",
							"    } else {",
							"        throw new Error('Location header not found in 302 redirect')",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "text/html",
						"type": "default"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "default"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{user_username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{user_password}}",
							"type": "text"
						},
						{
							"key": "_csrf",
							"value": "{{csrf_token}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{auth_host}}/login",
					"host": [
						"{{auth_host}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "4 /dialog/authorize 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//",
							"// Test for /dialog/authorize",
							"//",
							"// 1) Accept 302 redirect /login if cookie/sesson not logged in",
							"// 2) Accept 302 redirect to callbaack with auth code if authorized with trusted client",
							"//       - parse authorizaton code to global variable",
							"// 3) Accept 200 decision dialog page if authorized with untrusted client",
							"//       - parse transaction code",
							"// --------------------------------------------------------------------------",
							"pm.test(\"/dialog/authorise response analysis\", function () {",
							"    pm.globals.set('transaction_id', '');",
							"    pm.globals.set('access_token', '')",
							"    pm.globals.set('refresh_token', '')",
							"    if (pm.response.code === 302) {",
							"        // If 302 redirect, must have location header",
							"        let location = pm.response.headers.get('Location');",
							"        if (location) {",
							"            // Is # symbol correct?",
							"            let urlQueryPart = location.split('#')[1];",
							"            if (urlQueryPart) {",
							"                let queryKey = urlQueryPart.split('=')[0];",
							"                if (queryKey === 'access_token') {",
							"                    let accessToken = urlQueryPart.split('=')[1].split('&')[0];",
							"                    // console.log(accessToken);",
							"                    if (accessToken) {",
							"                        pm.globals.set('access_token', accessToken);",
							"                    } else {",
							"                        throw new Error('An access_token was not found in the response')",
							"                    }",
							"                    postman.setNextRequest('/oauth/introspect')",
							"                } else {",
							"                    throw new Error('Redirect has URL query without \"access_token\"');",
							"                }",
							"            } else {",
							"                // case of no query parameters in URL, must be /login request",
							"                pm.expect(location).to.equal('/login')",
							"            }",
							"        } else {",
							"            throw new Error('302 redirect without location header');",
							"        }",
							"    } else if (pm.response.code === 200) {",
							"        if (pm.response.text().indexOf('<title>Resource Decision</title>') >= 0) {",
							"            let arrayOfQuotedStrings = pm.response.text().split('\\\"')",
							"            let transactionIdIndex = arrayOfQuotedStrings.indexOf('transaction_id');",
							"            if (transactionIdIndex > 0) {",
							"                let transactionIdValue = arrayOfQuotedStrings[transactionIdIndex + 4];",
							"                pm.globals.set('transaction_id', transactionIdValue);",
							"            } else {",
							"                throw new Error('transaction_id not found in decision dialog html file');",
							"            }",
							"            let csrfTokenIndex = arrayOfQuotedStrings.indexOf('_csrf');",
							"            if (csrfTokenIndex > 0) {",
							"                let csrfTokenValue = arrayOfQuotedStrings[csrfTokenIndex + 2];",
							"                pm.globals.set('csrf_token', csrfTokenValue);",
							"            } else {",
							"                throw new Error('csrf token not found in decision dialog html file');",
							"            }",
							"            postman.setNextRequest('5 /dialog/authorize/decision (untrusted)')",
							"        } else {",
							"            throw new Error('Decision dialog not found in 200 response');",
							"        }",
							"    } else {",
							"        throw new Error('/dialog/authorize not an expected response');",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/html",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{auth_host}}/dialog/authorize?redirect_uri={{redirect_uri}}&response_type=token&client_id={{client_id}}&scope={{scopes}}",
					"host": [
						"{{auth_host}}"
					],
					"path": [
						"dialog",
						"authorize"
					],
					"query": [
						{
							"key": "redirect_uri",
							"value": "{{redirect_uri}}"
						},
						{
							"key": "response_type",
							"value": "token"
						},
						{
							"key": "client_id",
							"value": "{{client_id}}"
						},
						{
							"key": "scope",
							"value": "{{scopes}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5 /dialog/authorize/decision (untrusted)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Extrace access token from redirect URI\", function () {",
							"    let accessToken = null;",
							"    let locationHeader = pm.response.headers.get('Location');",
							"    if (locationHeader) {",
							"      accessToken = locationHeader.split('=')[1].split('&')[0];",
							"    }",
							"    if (accessToken) {",
							"      pm.globals.set('access_token', accessToken);",
							"      pm.globals.set('refresh_token', null);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "default"
					},
					{
						"key": "Accept",
						"value": "text/html",
						"type": "default"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "transaction_id",
							"value": "{{transaction_id}}",
							"type": "text"
						},
						{
							"key": "_csrf",
							"value": "{{csrf_token}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{auth_host}}/dialog/authorize/decision",
					"host": [
						"{{auth_host}}"
					],
					"path": [
						"dialog",
						"authorize",
						"decision"
					]
				}
			},
			"response": []
		},
		{
			"name": "/oauth/introspect",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"body has grant type password\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.grant_type).to.eql(\"implicit\");",
							"});",
							"pm.test(\"body has active true\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.active).to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{client_base64}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "default"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "access_token",
							"value": "{{access_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{auth_host}}/oauth/introspect",
					"host": [
						"{{auth_host}}"
					],
					"path": [
						"oauth",
						"introspect"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}